apiVersion: v1
kind: Service
metadata:
  name: delaysvc
  annotations:
    service.beta.kubernetes.io/azure-load-balancer-internal: "true"
spec:
  type: LoadBalancer
  ports:
  - port: 7777
    protocol: UDP
  selector:
    name: delaysvc
  
  externalTrafficPolicy: Local
  sessionAffinity: ClientIP
---
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: delaysvc
spec:
  selector:
    matchLabels:
      name: delaysvc
  template:
    metadata:
      labels:
        name: delaysvc
    spec:
      containers:
      - name: delaysvc
        image: python:slim
        env:
        - name: PORT
          value: "7777"
        - name: DELAY
          value: "150"
        command:
        - python
        - -c
        - |
          import asyncio
          import logging
          logger = logging.getLogger(__name__)


          class CounterProtocol:
              def __init__(self, max_i, init_c):
                  self.max_i = max_i
                  self.init_c = init_c

              def connection_made(self, transport):
                  self.transport = transport

              def datagram_received(self, data, addr):
                  logger.info('got %s from %s', data, addr)
                  c = int(data)
                  if c >= self.max_i:
                      logger.info('received packet reached max')
                      self.on_max(addr)
                  else:
                      new_c = c + 1
                      logger.info('reply with %s', new_c)
                      self.transport.sendto(str(new_c).encode(), addr)

              def kickstart(self, addr=None):
                  # this one assumes we already have the sock (connection_made)
                  logger.info('kickstarting message %s to %s', self.init_c, addr)
                  self.transport.sendto(str(self.init_c).encode(), addr)

              def on_max(self, addr):
                  pass


          class CounterServerProtocol(CounterProtocol):
              def __init__(self, max_i, init_c, delay):
                  super().__init__(max_i, init_c)
                  # self.init_c = init_c
                  self.delay = delay

              def on_max(self, addr):
                  loop = asyncio.get_running_loop()
                  loop.call_later(self.delay, self.kickstart, addr)


          async def server(addr, port, delay):
              logger.info("Starting UDP Counter Server")
              loop = asyncio.get_running_loop()
              transport, protocol = await loop.create_datagram_endpoint(
                  lambda: CounterServerProtocol(2, 1, delay),
                  local_addr=(addr, port))

              while True:
                  await asyncio.sleep(3600)
          

          logging.basicConfig(level=logging.DEBUG, format='%(asctime)s %(name)s %(message)s')
          asyncio.run(server('0.0.0.0', $(PORT), $(DELAY)))
