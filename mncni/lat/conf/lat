#!/bin/bash
# Sample CNI plugin that introduces packet latency when pod is set with
# annotation "lat=50ms"
# This plugin expects bash, jq, tc to be available.
cniadd () {
    # we assume REQUEST, CNI_NETNS, CNI_IFNAME is set
    # we extract latency from capabilities
    lat=`echo -n "$REQUEST" | jq -r '.runtimeConfig["io.kubernetes.cri.pod-annotations"].lat'`
    cniVersion=`echo -n "$REQUEST" | jq -r .cniVersion`
    prevResult=`echo -n "$REQUEST" | jq -r .prevResult`
    # we check if capability "lat" value is valid
    # numbers following ns, us or ms 
    if [[ "$lat" =~ ^[1-9][0-9]*[num]?s$ ]]; then
        # we apply qdisc setting
        # We are not validating the result since this is just demo
        tc -n "${CNI_NETNS##*/}" qdisc add dev "$CNI_IFNAME" root netem delay "$lat"
        echo -n "$prevResult"
        exit 0;
    elif [[ "$lat" == "null" ]] || [[ "$lat" == "" ]]; then
        # we safely ignore it since it is not configured
        echo -n "$prevResult"
        exit 0;
    else
        # we raise error
        echo -n "{\"cniVersion\":\"$cniVersion\",\"details\":\"Invalid lat $lat\""',"code":7,"msg":"Invalid lat"}'
        exit 1
    fi
}


case $CNI_COMMAND in
    ADD)
        REQUEST=$(</dev/stdin)
        cniadd
        ;;
    DEL)
        REQUEST=$(</dev/stdin)
        # nothing to do on del
        exit 0
        ;;
    CHECK)
        REQUEST=$(</dev/stdin)
        # we always succeed
        exit 0
        ;;
    VERSION)
        REQUEST=$(</dev/stdin)
        # nobody really calls this, we still provice this for compatibility
        cniVersion=`echo -n "$REQUEST" | jq -r .cniVersion`
        echo -n "{\"cniVersion\":\"$cniVersion\""',"supportedVersions":["0.3.0","0.3.1","0.4.0","1.0.0"]}'
        exit 0
        ;;
    *)
        echo "Invalid CNI_COMMAND $CNI_COMMAND"
        exit 1
esac
